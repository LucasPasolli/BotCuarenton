{"version":3,"file":"translator.esm.min.js","sources":["../src/index.js"],"sourcesContent":["export default class Translator {\n    /**\n     *\n     * @return {Object}\n     */\n    get translation() {\n        if (this.translations[this.locale] !== undefined) {\n            return this.translations[this.locale];\n        }\n\n        if (this.translations[this.localeArea] !== undefined) {\n            return this.translations[this.localeArea];\n        }\n\n        if (this.translations[this.localeDefault] !== undefined) {\n            return this.translations[this.localeDefault];\n        }\n\n        return {};\n    }\n\n    /**\n     * @param {Object} translations\n     * @param {BBCode} [bbCodeParser]\n     * @param {String} [locale]\n     * @param {String} [localeArea]\n     * @param {String} [localeDefault]\n     * @param {RegExp} [regexpParameters]\n     * @param {RegExp} [regexpTranslations]\n     */\n    constructor(translations, {\n        bbCodeParser = undefined,\n        locale = 'en-GB',\n        localeArea = 'en-GB',\n        localeDefault = 'en-GB',\n        regexpParameters = /\\\\?\\[([^\\[\\]]+)\\]/g,\n        regexpTranslations = /[\\\\\\$]?\\{([^{}]+)\\}/g,\n    }) {\n        /**\n         * all translations in structure. structure is\n         *    LOCALE:\n         *        TRKEY => VALUE\n         *        ...\n         *\n         * TRKEY is defined bei \"TRFILE.TRINDEX\" given from backend\n         *\n         * @var {Object}\n         */\n        this.translations = {};\n\n        this.bbCodeParser       = bbCodeParser;\n        this.locale             = locale;\n        this.localeArea         = localeArea;\n        this.localeDefault      = localeDefault;\n        this.regexpParameters   = regexpParameters;\n        this.regexpTranslations = regexpTranslations;\n\n        this.setTranslations(translations);\n    }\n\n    /**\n     *\n     * @param {String} key\n     * @param {String} [defaults]\n     * @return {*}\n     */\n    getValueFromKey(key, defaults) {\n        const keys = key.split('.');\n\n        let text = keys.reduce((acc, entry) => acc[entry] ?? undefined, this.translation);\n        if (text === undefined && this.translations[this.localeArea] !== undefined) {\n            text = keys.reduce((acc, entry) => acc[entry] ?? undefined, this.translations[this.localeArea]);\n        }\n\n        if (text === undefined && this.translations[this.localeDefault] !== undefined) {\n            text = keys.reduce((acc, entry) => acc[entry] ?? undefined, this.translations[this.localeDefault]);\n        }\n\n        if (text === undefined) {\n            if (defaults === undefined) {\n                return '{' + key + '}';\n            }\n            text = defaults;\n        }\n\n        return text;\n    }\n\n    /**\n     *\n     * @param {BBCode} bbCodeParser\n     * @return {Translator}\n     */\n    setBBCodeParser(bbCodeParser) {\n        this.bbCodeParser = bbCodeParser;\n\n        return this;\n    }\n\n    /**\n     * set Translations\n     *\n     * @param {Object} translations\n     * @returns {Translator}\n     */\n    setTranslations(translations) {\n        Object.entries(translations).forEach(([locale, values]) => {\n            if (this.translations[locale] === undefined) {\n                this.translations[locale] = {};\n            }\n\n            this.translations[locale] = {...values};\n        });\n\n        return this;\n    }\n\n    /**\n     * translate a text with given parameters\n     *\n     * @param {String} key\n     * @param {Object} [parameters]\n     * @param {String} [defaults]\n     * @returns {String}\n     */\n    translate(key, parameters, defaults) {\n        if (key === undefined || key === null) {\n            return key;\n        }\n\n        if (key.charAt(0) === '{') {\n            key = key.slice(1);\n        }\n        if (key.charAt(key.length - 1) === '}') {\n            key = key.slice(0, key.length - 1);\n        }\n\n        let text = this.getValueFromKey(key, defaults);\n        if (text === null || text === undefined) {\n            return text;\n        }\n\n        if (typeof text !== 'string') {\n            return text;\n        }\n\n        // parameter replacement\n        if (parameters instanceof Object) {\n            text = Object.keys(parameters).reduce((acc, name) => acc.replace(new RegExp('\\\\[' + name + '\\\\]', 'gi'), parameters[name]), text);\n        }\n\n        if (this.bbCodeParser === undefined) {\n            return text;\n        }\n\n        return this.bbCodeParser.parse(text);\n    };\n\n    /**\n     * inline translation\n     *\n     * @param {String} text\n     * @returns {String}\n     */\n    translateInline(text) {\n        // replace the text\n        text = text.replace(this.regexpTranslations, (match, key) => {\n            switch (match.charAt(0)) {\n                case '\\\\':\n                    return match.slice(1);\n                case '$':\n                    return match;\n            }\n\n            return this.translate(key, undefined, match);\n        });\n\n        return text;\n    };\n}\n"],"names":["undefined","this","translations","locale","localeArea","localeDefault","constructor","bbCodeParser","regexpParameters","regexpTranslations","setTranslations","getValueFromKey","key","defaults","keys","split","text","reduce","acc","entry","translation","setBBCodeParser","Object","entries","forEach","values","translate","parameters","charAt","slice","length","name","replace","RegExp","parse","translateInline","match"],"mappings":"eAAe,oCAMgCA,IAAnCC,KAAKC,aAAaD,KAAKE,QAChBF,KAAKC,aAAaD,KAAKE,aAGSH,IAAvCC,KAAKC,aAAaD,KAAKG,YAChBH,KAAKC,aAAaD,KAAKG,iBAGYJ,IAA1CC,KAAKC,aAAaD,KAAKI,eAChBJ,KAAKC,aAAaD,KAAKI,eAG3B,GAYXC,YAAYJ,GAAcK,aACtBA,EADsBJ,OAEtBA,EAAS,QAFaC,WAGtBA,EAAa,QAHSC,cAItBA,EAAgB,QAJMG,iBAKtBA,EAAmB,qBALGC,mBAMtBA,EAAqB,8BAYhBP,aAAe,QAEfK,aAAqBA,OACrBJ,OAAqBA,OACrBC,WAAqBA,OACrBC,cAAqBA,OACrBG,iBAAqBA,OACrBC,mBAAqBA,OAErBC,gBAAgBR,GASzBS,gBAAgBC,EAAKC,SACXC,EAAOF,EAAIG,MAAM,SAEnBC,EAAOF,EAAKG,OAAO,CAACC,EAAKC,IAAUD,EAAIC,SAAUnB,EAAWC,KAAKmB,qBACxDpB,IAATgB,QAA6DhB,IAAvCC,KAAKC,aAAaD,KAAKG,cAC7CY,EAAOF,EAAKG,OAAO,CAACC,EAAKC,IAAUD,EAAIC,SAAUnB,EAAWC,KAAKC,aAAaD,KAAKG,mBAG1EJ,IAATgB,QAAgEhB,IAA1CC,KAAKC,aAAaD,KAAKI,iBAC7CW,EAAOF,EAAKG,OAAO,CAACC,EAAKC,IAAUD,EAAIC,SAAUnB,EAAWC,KAAKC,aAAaD,KAAKI,sBAG1EL,IAATgB,EAAoB,SACHhB,IAAba,QACO,IAAMD,EAAM,IAEvBI,EAAOH,SAGJG,EAQXK,gBAAgBd,eACPA,aAAeA,EAEbN,KASXS,gBAAgBR,UACZoB,OAAOC,QAAQrB,GAAcsB,QAAQ,EAAErB,EAAQsB,WACTzB,IAA9BC,KAAKC,aAAaC,UACbD,aAAaC,GAAU,SAG3BD,aAAaC,GAAU,IAAIsB,KAG7BxB,KAWXyB,UAAUd,EAAKe,EAAYd,MACnBD,MAAAA,SACOA,EAGW,MAAlBA,EAAIgB,OAAO,KACXhB,EAAMA,EAAIiB,MAAM,IAEe,MAA/BjB,EAAIgB,OAAOhB,EAAIkB,OAAS,KACxBlB,EAAMA,EAAIiB,MAAM,EAAGjB,EAAIkB,OAAS,QAGhCd,EAAOf,KAAKU,gBAAgBC,EAAKC,UACjCG,MAAAA,GAIgB,iBAATA,EAHAA,GAQPW,aAAsBL,SACtBN,EAAOM,OAAOR,KAAKa,GAAYV,OAAO,CAACC,EAAKa,IAASb,EAAIc,QAAQ,IAAIC,OAAO,MAAQF,EAAO,MAAO,MAAOJ,EAAWI,IAAQf,SAGtGhB,IAAtBC,KAAKM,aACES,EAGJf,KAAKM,aAAa2B,MAAMlB,IASnCmB,gBAAgBnB,UAEZA,EAAOA,EAAKgB,QAAQ/B,KAAKQ,mBAAoB,CAAC2B,EAAOxB,YACzCwB,EAAMR,OAAO,QACZ,YACMQ,EAAMP,MAAM,OAClB,WACMO,SAGRnC,KAAKyB,UAAUd,OAAKZ,EAAWoC"}