{"version":3,"file":"translator.min.js","sources":["../src/index.js"],"sourcesContent":["export default class Translator {\n    /**\n     *\n     * @return {Object}\n     */\n    get translation() {\n        if (this.translations[this.locale] !== undefined) {\n            return this.translations[this.locale];\n        }\n\n        if (this.translations[this.localeArea] !== undefined) {\n            return this.translations[this.localeArea];\n        }\n\n        if (this.translations[this.localeDefault] !== undefined) {\n            return this.translations[this.localeDefault];\n        }\n\n        return {};\n    }\n\n    /**\n     * @param {Object} translations\n     * @param {BBCode} [bbCodeParser]\n     * @param {String} [locale]\n     * @param {String} [localeArea]\n     * @param {String} [localeDefault]\n     * @param {RegExp} [regexpParameters]\n     * @param {RegExp} [regexpTranslations]\n     */\n    constructor(translations, {\n        bbCodeParser = undefined,\n        locale = 'en-GB',\n        localeArea = 'en-GB',\n        localeDefault = 'en-GB',\n        regexpParameters = /\\\\?\\[([^\\[\\]]+)\\]/g,\n        regexpTranslations = /[\\\\\\$]?\\{([^{}]+)\\}/g,\n    }) {\n        /**\n         * all translations in structure. structure is\n         *    LOCALE:\n         *        TRKEY => VALUE\n         *        ...\n         *\n         * TRKEY is defined bei \"TRFILE.TRINDEX\" given from backend\n         *\n         * @var {Object}\n         */\n        this.translations = {};\n\n        this.bbCodeParser       = bbCodeParser;\n        this.locale             = locale;\n        this.localeArea         = localeArea;\n        this.localeDefault      = localeDefault;\n        this.regexpParameters   = regexpParameters;\n        this.regexpTranslations = regexpTranslations;\n\n        this.setTranslations(translations);\n    }\n\n    /**\n     *\n     * @param {String} key\n     * @param {String} [defaults]\n     * @return {*}\n     */\n    getValueFromKey(key, defaults) {\n        const keys = key.split('.');\n\n        let text = keys.reduce((acc, entry) => acc[entry] ?? undefined, this.translation);\n        if (text === undefined && this.translations[this.localeArea] !== undefined) {\n            text = keys.reduce((acc, entry) => acc[entry] ?? undefined, this.translations[this.localeArea]);\n        }\n\n        if (text === undefined && this.translations[this.localeDefault] !== undefined) {\n            text = keys.reduce((acc, entry) => acc[entry] ?? undefined, this.translations[this.localeDefault]);\n        }\n\n        if (text === undefined) {\n            if (defaults === undefined) {\n                return '{' + key + '}';\n            }\n            text = defaults;\n        }\n\n        return text;\n    }\n\n    /**\n     *\n     * @param {BBCode} bbCodeParser\n     * @return {Translator}\n     */\n    setBBCodeParser(bbCodeParser) {\n        this.bbCodeParser = bbCodeParser;\n\n        return this;\n    }\n\n    /**\n     * set Translations\n     *\n     * @param {Object} translations\n     * @returns {Translator}\n     */\n    setTranslations(translations) {\n        Object.entries(translations).forEach(([locale, values]) => {\n            if (this.translations[locale] === undefined) {\n                this.translations[locale] = {};\n            }\n\n            this.translations[locale] = {...values};\n        });\n\n        return this;\n    }\n\n    /**\n     * translate a text with given parameters\n     *\n     * @param {String} key\n     * @param {Object} [parameters]\n     * @param {String} [defaults]\n     * @returns {String}\n     */\n    translate(key, parameters, defaults) {\n        if (key === undefined || key === null) {\n            return key;\n        }\n\n        if (key.charAt(0) === '{') {\n            key = key.slice(1);\n        }\n        if (key.charAt(key.length - 1) === '}') {\n            key = key.slice(0, key.length - 1);\n        }\n\n        let text = this.getValueFromKey(key, defaults);\n        if (text === null || text === undefined) {\n            return text;\n        }\n\n        if (typeof text !== 'string') {\n            return text;\n        }\n\n        // parameter replacement\n        if (parameters instanceof Object) {\n            text = Object.keys(parameters).reduce((acc, name) => acc.replace(new RegExp('\\\\[' + name + '\\\\]', 'gi'), parameters[name]), text);\n        }\n\n        if (this.bbCodeParser === undefined) {\n            return text;\n        }\n\n        return this.bbCodeParser.parse(text);\n    };\n\n    /**\n     * inline translation\n     *\n     * @param {String} text\n     * @returns {String}\n     */\n    translateInline(text) {\n        // replace the text\n        text = text.replace(this.regexpTranslations, (match, key) => {\n            switch (match.charAt(0)) {\n                case '\\\\':\n                    return match.slice(1);\n                case '$':\n                    return match;\n            }\n\n            return this.translate(key, undefined, match);\n        });\n\n        return text;\n    };\n}\n"],"names":["translations","bbCodeParser","undefined","locale","localeArea","localeDefault","regexpParameters","regexpTranslations","setTranslations","this","key","defaults","keys","split","text","reduce","acc","entry","translation","Object","entries","forEach","values","_this","parameters","charAt","slice","length","getValueFromKey","name","replace","RegExp","parse","match","_this2","translate"],"mappings":"owDA8BgBA,aACRC,aAAAA,kBAAeC,QACfC,OAAAA,aAAS,cACTC,WAAAA,aAAa,cACbC,cAAAA,aAAgB,cAChBC,iBAAAA,aAAmB,2BACnBC,mBAAAA,aAAqB,oIAYhBP,aAAe,QAEfC,aAAqBA,OACrBE,OAAqBA,OACrBC,WAAqBA,OACrBC,cAAqBA,OACrBC,iBAAqBA,OACrBC,mBAAqBA,OAErBC,gBAAgBR,6DAnDkBE,IAAnCO,KAAKT,aAAaS,KAAKN,QAChBM,KAAKT,aAAaS,KAAKN,aAGSD,IAAvCO,KAAKT,aAAaS,KAAKL,YAChBK,KAAKT,aAAaS,KAAKL,iBAGYF,IAA1CO,KAAKT,aAAaS,KAAKJ,eAChBI,KAAKT,aAAaS,KAAKJ,eAG3B,kDAgDKK,EAAKC,OACXC,EAAOF,EAAIG,MAAM,KAEnBC,EAAOF,EAAKG,QAAO,SAACC,EAAKC,0BAAUD,EAAIC,uBAAUf,IAAWO,KAAKS,qBACxDhB,IAATY,QAA6DZ,IAAvCO,KAAKT,aAAaS,KAAKL,cAC7CU,EAAOF,EAAKG,QAAO,SAACC,EAAKC,0BAAUD,EAAIC,uBAAUf,IAAWO,KAAKT,aAAaS,KAAKL,mBAG1EF,IAATY,QAAgEZ,IAA1CO,KAAKT,aAAaS,KAAKJ,iBAC7CS,EAAOF,EAAKG,QAAO,SAACC,EAAKC,0BAAUD,EAAIC,uBAAUf,IAAWO,KAAKT,aAAaS,KAAKJ,sBAG1EH,IAATY,EAAoB,SACHZ,IAAbS,QACO,IAAMD,EAAM,IAEvBI,EAAOH,SAGJG,0CAQKb,eACPA,aAAeA,EAEbQ,6CASKT,qBACZmB,OAAOC,QAAQpB,GAAcqB,SAAQ,yBAAElB,OAAQmB,YACTpB,IAA9BqB,EAAKvB,aAAaG,KAClBoB,EAAKvB,aAAaG,GAAU,IAGhCoB,EAAKvB,aAAaG,sWAAcmB,MAG7Bb,uCAWDC,EAAKc,EAAYb,MACnBD,MAAAA,SACOA,EAGW,MAAlBA,EAAIe,OAAO,KACXf,EAAMA,EAAIgB,MAAM,IAEe,MAA/BhB,EAAIe,OAAOf,EAAIiB,OAAS,KACxBjB,EAAMA,EAAIgB,MAAM,EAAGhB,EAAIiB,OAAS,QAGhCb,EAAOL,KAAKmB,gBAAgBlB,EAAKC,UACjCG,MAAAA,GAIgB,iBAATA,EAHAA,GAQPU,aAAsBL,SACtBL,EAAOK,OAAOP,KAAKY,GAAYT,QAAO,SAACC,EAAKa,UAASb,EAAIc,QAAQ,IAAIC,OAAO,MAAQF,EAAO,MAAO,MAAOL,EAAWK,MAAQf,SAGtGZ,IAAtBO,KAAKR,aACEa,EAGJL,KAAKR,aAAa+B,MAAMlB,4CASnBA,qBAEZA,EAAOA,EAAKgB,QAAQrB,KAAKF,oBAAoB,SAAC0B,EAAOvB,UACzCuB,EAAMR,OAAO,QACZ,YACMQ,EAAMP,MAAM,OAClB,WACMO,SAGRC,EAAKC,UAAUzB,OAAKR,EAAW+B"}